{"version":3,"sources":["web-build/register-service-worker.js","src/Home.js","src/Profile.js","src/Store/reducer/Auth.js","src/Store/reducer/index.js","src/Store/index.js","App.js","index.js"],"names":["navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console","Home","props","state","log","Platform","OS","View","Text","onPress","navigation","navigate","Component","StyleSheet","create","Profile","goBack","InitialState","Auth","action","type","combineReducers","reduxCompose","compose","store","createStore","reducer","applyMiddleware","promise","thunk","Stack","createStackNavigator","App","NavigationContainer","Navigator","initialRouteName","Screen","name","component","options","title","headerStyle","backgroundColor","headerTintColor","headerTitleStyle","fontWeight","registerRootComponent"],"mappings":"oHAEI,kBAAmBA,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,uCAAwC,CAAEC,MAAO,mBAC1DC,MAAK,SAAUC,OAGfC,OAAM,SAAUC,GACfC,QAAQH,KAAK,oCAAqCE,U,moBCPrCE,E,gCAEjB,WAAYC,GAAQ,IAAD,sBACf,cAAMA,IAEDC,MAAQ,GAHE,E,6CAQnB,WACIH,QAAQI,IAAIC,IAASC,M,oBAIzB,WAAU,IAAD,OACL,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,QAAS,kBAAI,EAAKP,MAAMQ,WAAWC,SAAS,gBAAlD,sB,GAlBkBC,aAwBnBC,IAAWC,OAAO,I,mbCxBZC,E,0HACjB,WAAU,IAAD,OACL,OACI,kBAACR,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,kBAEA,kBAACA,EAAA,EAAD,CAAMC,QAAS,kBAAI,EAAKP,MAAMQ,WAAWM,WAAzC,gB,GANqBJ,a,GAatBC,IAAWC,OAAO,I,2CChBpBG,EAAe,GAEfC,EAAO,WAAmC,IAAlCf,EAAiC,uDAAzBc,EAAcE,EAAW,uCACpD,OAAQA,EAAOC,MACb,IAAK,SAEH,OADApB,QAAQI,IAAIe,EAAOC,KAAM,WAClB,SAET,QACE,OAAOjB,ICNEkB,cAAgB,CAC7BH,KAAMA,ICGJI,EAAeC,IAQf,IAIWC,EAJGC,YAAYC,EAASJ,EAAaK,YAAgBC,IAAQC,OCGtEC,EAAQC,cAuDCC,MArDf,WACE,OACE,gBAAC,IAAD,CAAUR,MAAOA,GACf,gBAACS,EAAA,EAAD,KACE,gBAACH,EAAMI,UAAP,CAAiBC,iBAAiB,aAChC,gBAACL,EAAMM,OAAP,CACEC,KAAK,YACLC,UAAWrC,EACXsC,QAAS,CACPC,MAAO,aACPC,YAAa,CACXC,gBAAiB,WAEnBC,gBAAiB,OACjBC,iBAAkB,CAChBC,WAAY,WAIlB,gBAACf,EAAMM,OAAP,CACEC,KAAK,aACLC,UAAWvB,EACXwB,QAAS,CACPC,MAAO,cACPC,YAAa,CACXC,gBAAiB,WAEnBC,gBAAiB,OACjBC,iBAAkB,CAChBC,WAAY,eC1C5BC,YAAsBd,K","file":"static/js/app.e33a24eb.chunk.js","sourcesContent":["/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/ReduxExpoWeb/expo-service-worker.js', { scope: '/ReduxExpoWeb/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","import React, { Component } from 'react'\r\nimport { Text, StyleSheet, View, Platform } from 'react-native'\r\n\r\nexport default class Home extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             \r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(Platform.OS)\r\n    }\r\n    \r\n    \r\n    render() {\r\n        return (\r\n            <View>\r\n                <Text onPress={()=>this.props.navigation.navigate(\"SecondPage\")}> Home Screen </Text>\r\n            </View>\r\n        )\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({})\r\n","import React, { Component } from 'react'\r\nimport { Text, StyleSheet, View } from 'react-native'\r\n\r\nexport default class Profile extends Component {\r\n    render() {\r\n        return (\r\n            <View>\r\n                <Text> Profile </Text>\r\n\r\n                <Text onPress={()=>this.props.navigation.goBack()}>Go Back</Text>\r\n                \r\n            </View>\r\n        )\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({})\r\n","export const InitialState = {};\r\n\r\nexport const Auth = (state = InitialState, action) => {\r\n  switch (action.type) {\r\n    case 'Log_In':\r\n      console.log(action.type, 'reducer');\r\n      return 'Log_In';\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default Auth;","import { combineReducers } from \"redux\";\r\nimport { Auth } from \"./Auth\";\r\n\r\nexport default combineReducers({\r\n  Auth: Auth,\r\n});\r\n","import { applyMiddleware, compose, createStore } from \"redux\";\r\nimport promise from \"redux-promise\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducer from \"./reducer\";\r\n\r\n\r\n\r\nlet reduxCompose = compose;\r\n\r\nif(__DEV__){\r\n    reduxCompose  = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n}\r\n\r\n\r\n\r\n    const store = createStore(reducer, reduxCompose(applyMiddleware(promise,thunk)))\r\n\r\n\r\n\r\nexport default store;","// Navigate Between Screens using React Navigation in React Native //\n// https://aboutreact.com/react-native-stack-navigation //\nimport \"react-native-gesture-handler\";\n\nimport * as React from \"react\";\nimport { Button, View, Text } from \"react-native\";\n\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport Home from \"./src/Home\";\nimport Profile from \"./src/Profile\";\nimport { Provider } from \"react-redux\";\nimport store from \"./src/Store\";\n\n// import FirstPage from './pages/FirstPage';\n// import SecondPage from './pages/SecondPage';\n// import ThirdPage from './pages/ThirdPage';\n\nconst Stack = createStackNavigator();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <NavigationContainer>\n        <Stack.Navigator initialRouteName=\"FirstPage\">\n          <Stack.Screen\n            name=\"FirstPage\"\n            component={Home}\n            options={{\n              title: \"First Page\", //Set Header Title\n              headerStyle: {\n                backgroundColor: \"#f4511e\", //Set Header color\n              },\n              headerTintColor: \"#fff\", //Set Header text color\n              headerTitleStyle: {\n                fontWeight: \"bold\", //Set Header text style\n              },\n            }}\n          />\n          <Stack.Screen\n            name=\"SecondPage\"\n            component={Profile}\n            options={{\n              title: \"Second Page\", //Set Header Title\n              headerStyle: {\n                backgroundColor: \"#f4511e\", //Set Header color\n              },\n              headerTintColor: \"#fff\", //Set Header text color\n              headerTitleStyle: {\n                fontWeight: \"bold\", //Set Header text style\n              },\n            }}\n          />\n          {/* <Stack.Screen\n          name=\"ThirdPage\"\n          component={ThirdPage}\n          options={{\n            title: 'Third Page', //Set Header Title\n            headerStyle: {\n              backgroundColor: '#f4511e', //Set Header color\n            },\n            headerTintColor: '#fff', //Set Header text color\n            headerTitleStyle: {\n              fontWeight: 'bold', //Set Header text style\n            },\n          }}\n        /> */}\n        </Stack.Navigator>\n      </NavigationContainer>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}